import asyncio
import random
import sqlite3
from datetime import date
from collections import Counter

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, CommandObject
from aiogram.utils.markdown import hbold

from tviyastrogid_keyboard import (
    main_keyboard, zodiac_keyboard, taro_question1,
    music_q1_kb, music_q2_kb, music_q3_kb, music_q4_kb, music_q5_kb, music_q6_kb, music_q7_kb,
    music_q8_kb, music_q9_kb, music_q10_kb, music_q11_kb, music_q12_kb, music_q13_kb,
    music_q14_kb, music_q15_kb,
    architips_q1_kb, architips_q2_kb, architips_q3_kb, architips_q4_kb, architips_q5_kb,
    architips_start_kb, architips_partner_kb, archetype_test_kb,
    kwiz_question2_inline, explanation_cards_taro_y_or_n, daily_bonus_kb,
)

from openai_client import client  # AsyncOpenAI from env

router = Router()

# ===== States =====
class ProblemState(StatesGroup):
    waiting_for_problem = State()

class DreamState(StatesGroup):
    waiting_for_dream = State()

class ArchetypeTest(StatesGroup):
    person = State()
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()

class ZodiacCompatibility(StatesGroup):
    your_sign = State()
    partner_sign = State()

class regist(StatesGroup):
    name = State()
    zodiak_callback = State()
    zodiak_callback1 = State()

class taro_answer(StatesGroup):
    come_question1 = State()
    answer1 = State()

class AstroChat(StatesGroup):
    waiting_for_question = State()


# ===== DB init + helpers =====
def _init_db():
    db = sqlite3.connect("tviyastrogid.db", timeout=10)
    db.execute("PRAGMA journal_mode=WAL;")
    db.execute("PRAGMA busy_timeout=10000;")
    cur = db.cursor()
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            zodiac_sign TEXT,
            cards INTEGER DEFAULT 50,
            last_gift TEXT,
            invited_by INTEGER
        )
        """
    )
    db.commit()
    db.close()

def db_conn():
    conn = sqlite3.connect("tviyastrogid.db", timeout=10)
    conn.execute("PRAGMA journal_mode=WAL;")
    conn.execute("PRAGMA busy_timeout=10000;")
    return conn

_init_db()

def spend_cards_if_possible(user_id: int, amount: int) -> bool:
    db = db_conn()
    cur = db.cursor()
    cur.execute("SELECT cards FROM users WHERE id = ?", (user_id,))
    row = cur.fetchone()
    if row and (row[0] or 0) >= amount:
        cur.execute("UPDATE users SET cards = cards - ? WHERE id = ?", (amount, user_id))
        db.commit()
        db.close()
        return True
    db.close()
    return False


# ===== /start (no deep link) =====
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id

    db = db_conn()
    cur = db.cursor()
    cur.execute("INSERT OR IGNORE INTO users (id) VALUES (?)", (user_id,))
    db.commit()
    db.close()

    photo = "AgACAgIAAxkBAAIFRGgUnhBhg0pqMszswBANaZYpsCuOAAIb-jEbbpihSGn8T3t5wVOcAQADAgADeQADNgQ"
    await message.answer_photo(
        photo=photo,
        caption="–ü—Ä–∏–≤—ñ—Ç, —Ü–µ —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ê—Å—Ç—Ä–æ–ì—ñ–¥ üåå\n–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Ç–≤–æ—é –¥–æ–ª—é."
    )
    zodiac_msg = await message.answer("–û–±–µ—Ä–∏ —Å–≤—ñ–π –∑–Ω–∞–∫ –∑–æ–¥—ñ–∞–∫—É!", reply_markup=zodiac_keyboard)
    await state.update_data(zodiac_msg_id=zodiac_msg.message_id)
    await state.set_state(regist.zodiak_callback1)


# ===== /start with deep link (referrals) =====
@router.message(CommandStart(deep_link=True))
async def cmd_start_with_ref(message: Message, command: CommandObject, state: FSMContext):
    user_id = message.from_user.id
    inviter_id = int(command.args) if command.args and command.args.isdigit() else None

    db = db_conn()
    cur = db.cursor()

    cur.execute("SELECT 1 FROM users WHERE id = ?", (user_id,))
    exists = cur.fetchone()

    if not exists:
        cur.execute("INSERT INTO users (id, cards, invited_by) VALUES (?, ?, ?)", (user_id, 0, inviter_id))
        if inviter_id and inviter_id != user_id:
            cur.execute("UPDATE users SET cards = COALESCE(cards,0) + 25 WHERE id = ?", (inviter_id,))

    db.commit()
    db.close()

    await message.answer_photo(
        photo="AgACAgIAAxkBAAIFRGgUnhBhg0pqMszswBANaZYpsCuOAAIb-jEbbpihSGn8T3t5wVOcAQADAgADeQADNgQ",
        caption="–ü—Ä–∏–≤—ñ—Ç, —Ü–µ —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ê—Å—Ç—Ä–æ–ì—ñ–¥ üåå\n–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤–æ—é –¥–æ–ª—é."
    )
    zodiac_msg = await message.answer("–û–±–µ—Ä–∏ —Å–≤—ñ–π –∑–Ω–∞–∫ –∑–æ–¥—ñ–∞–∫—É!", reply_markup=zodiac_keyboard)
    await state.update_data(zodiac_msg_id=zodiac_msg.message_id)
    await state.set_state(regist.zodiak_callback1)


# ===== Zodiac select =====
@router.callback_query(StateFilter(regist.zodiak_callback1))
async def zodiac_callback_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    zodiac_msg_id = data.get("zodiac_msg_id")
    if zodiac_msg_id:
        try:
            await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=zodiac_msg_id)
        except:
            pass

    zodiac_map = {
        "zodiac_–û–≤–µ–Ω": "–û–≤–µ–Ω", "zodiac_–¢–µ–ª–µ—Ü—å": "–¢–µ–ª–µ—Ü—å", "zodiac_–ë–ª–∏–∑–Ω—é–∫–∏": "–ë–ª–∏–∑–Ω—é–∫–∏",
        "zodiac_–†–∞–∫": "–†–∞–∫", "zodiac_–õ–µ–≤": "–õ–µ–≤", "zodiac_–î—ñ–≤–∞": "–î—ñ–≤–∞",
        "zodiac_–¢–µ—Ä–µ–∑–∏": "–¢–µ—Ä–µ–∑–∏", "zodiac_–°–∫–æ—Ä–ø—ñ–æ–Ω": "–°–∫–æ—Ä–ø—ñ–æ–Ω", "zodiac_–°—Ç—Ä—ñ–ª–µ—Ü—å": "–°—Ç—Ä—ñ–ª–µ—Ü—å",
        "zodiac_–ö–æ–∑–µ—Ä—ñ–≥": "–ö–æ–∑–µ—Ä—ñ–≥", "zodiac_–í–æ–¥–æ–ª—ñ–π": "–í–æ–¥–æ–ª—ñ–π", "zodiac_–†–∏–±–∏": "–†–∏–±–∏"
    }
    zodiak = zodiac_map.get(callback.data)
    if not zodiak:
        await callback.message.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ó–Ω–∞–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return

    user_id = callback.from_user.id
    db = db_conn()
    cur = db.cursor()
    cur.execute("UPDATE users SET zodiac_sign = ? WHERE id = ?", (zodiak, user_id))
    db.commit()
    db.close()

    await callback.message.answer(f"üîÆ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –í–∏ –æ–±—Ä–∞–ª–∏ –∑–Ω–∞–∫ {zodiak}.")
    await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —â–æ –≤–∞—Å —ñ–Ω—Ç–µ—Ä–µ—Å—É—î –≤ –º–µ–Ω—é –∑–Ω–∏–∑—É", reply_markup=main_keyboard)
    await state.clear()
    await callback.answer()


# ===== Tarot Q&A =====
@router.message(F.text == "üîÆ –†–æ–∑–∫–ª–∞–¥ –¢–∞—Ä–æ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚Äì 10üÉè")
async def quastion_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not spend_cards_if_possible(user_id, 10):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 10 üÉè.")
        return
    await message.answer("üÉè –ù–∞–ø–∏—à–∏ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚Äî —ñ —è –∑—Ä–æ–±–ª—é —Ä–æ–∑–∫–ª–∞–¥, —â–æ –≤—ñ–¥–∫—Ä–∏—î –ø—Ä–∏—Ö–æ–≤–∞–Ω—É —Å—É—Ç—å.")
    await state.set_state(taro_answer.come_question1)

@router.message(StateFilter(taro_answer.come_question1))
async def tarot_reading(message: Message, state: FSMContext):
    await message.answer_photo(
        photo="AgACAgIAAxkBAAIFS2gUn8yWzRsY15lVroUlZOMdLYF_AAL76zEbNX-oSLSquGiNbVxoAQADAgADeQADNgQ",
        caption="üîÆ –Ø —Ä–æ–∑–∫–ª–∞–¥–∞—é –∫–∞—Ä—Ç–∏‚Ä¶ –ø—Ä–∏–≥–æ—Ç—É–π—Å—è."
    )
    await asyncio.sleep(4)
    await message.answer("‚ú® –©–µ —Ç—Ä–æ—Ö–∏‚Ä¶")
    await asyncio.sleep(2)
    tarot_cards = [
        "0. –î—É—Ä–∞–∫","I. –ú–∞–≥","II. –í–µ—Ä—Ö–æ–≤–Ω–∞ –ñ—Ä–∏—Ü—è","III. –Ü–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü—è","IV. –Ü–º–ø–µ—Ä–∞—Ç–æ—Ä",
        "V. –Ü—î—Ä–æ—Ñ–∞–Ω—Ç","VI. –ó–∞–∫–æ—Ö–∞–Ω—ñ","VII. –ö–æ–ª—ñ—Å–Ω–∏—Ü—è","VIII. –°–∏–ª–∞","IX. –í—ñ–¥–ª—é–¥–Ω–∏–∫",
        "X. –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω–∏","XI. –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ñ—Å—Ç—å","XII. –ü–æ–≤—ñ—à–µ–Ω–∏–π","XIII. –°–º–µ—Ä—Ç—å",
        "XIV. –£–º—ñ—Ä–µ–Ω—ñ—Å—Ç—å","XV. –î–∏—è–≤–æ–ª","XVI. –í–µ–∂–∞","XVII. –ó—ñ—Ä–∫–∞","XVIII. –ú—ñ—Å—è—Ü—å",
        "XIX. –°–æ–Ω—Ü–µ","XX. –°—É–¥","XXI. –°–≤—ñ—Ç",
        "–¢—É–∑ –ñ–µ–∑–ª—ñ–≤","2 –ñ–µ–∑–ª—ñ–≤","3 –ñ–µ–∑–ª—ñ–≤","4 –ñ–µ–∑–ª—ñ–≤","5 –ñ–µ–∑–ª—ñ–≤","6 –ñ–µ–∑–ª—ñ–≤",
        "7 –ñ–µ–∑–ª—ñ–≤","8 –ñ–µ–∑–ª—ñ–≤","9 –ñ–µ–∑–ª—ñ–≤","10 –ñ–µ–∑–ª—ñ–≤","–ü–∞–∂ –ñ–µ–∑–ª—ñ–≤","–õ–∏—Ü–∞—Ä –ñ–µ–∑–ª—ñ–≤",
        "–ö–æ—Ä–æ–ª–µ–≤–∞ –ñ–µ–∑–ª—ñ–≤","–ö–æ—Ä–æ–ª—å –ñ–µ–∑–ª—ñ–≤",
        "–¢—É–∑ –ö—É–±–∫—ñ–≤","2 –ö—É–±–∫—ñ–≤","3 –ö—É–±–∫—ñ–≤","4 –ö—É–±–∫—ñ–≤","5 –ö—É–±–∫—ñ–≤","6 –ö—É–±–∫—ñ–≤",
        "7 –ö—É–±–∫—ñ–≤","8 –ö—É–±–∫—ñ–≤","9 –ö—É–±–∫—ñ–≤","10 –ö—É–±–∫—ñ–≤","–ü–∞–∂ –ö—É–±–∫—ñ–≤","–õ–∏—Ü–∞—Ä –ö—É–±–∫—ñ–≤",
        "–ö–æ—Ä–æ–ª–µ–≤–∞ –ö—É–±–∫—ñ–≤","–ö–æ—Ä–æ–ª—å –ö—É–±–∫—ñ–≤",
        "–¢—É–∑ –ú–µ—á—ñ–≤","2 –ú–µ—á—ñ–≤","3 –ú–µ—á—ñ–≤","4 –ú–µ—á—ñ–≤","5 –ú–µ—á—ñ–≤","6 –ú–µ—á—ñ–≤",
        "7 –ú–µ—á—ñ–≤","8 –ú–µ—á—ñ–≤","9 –ú–µ—á—ñ–≤","10 –ú–µ—á—ñ–≤","–ü–∞–∂ –ú–µ—á—ñ–≤","–õ–∏—Ü–∞—Ä –ú–µ—á—ñ–≤",
        "–ö–æ—Ä–æ–ª–µ–≤–∞ –ú–µ—á—ñ–≤","–ö–æ—Ä–æ–ª—å –ú–µ—á—ñ–≤",
        "–¢—É–∑ –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤","2 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤","3 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤","4 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤","5 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤","6 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤",
        "7 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤","8 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤","9 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤","10 –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤","–ü–∞–∂ –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤","–õ–∏—Ü–∞—Ä –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤",
        "–ö–æ—Ä–æ–ª–µ–≤–∞ –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤","–ö–æ—Ä–æ–ª—å –ü–µ–Ω—Ç–∞–∫–ª—ñ–≤"
    ]
    random_cards = random.sample(tarot_cards, 3)
    await state.update_data(drawn_cards=random_cards, user_question=message.text)
    await message.answer("üÉè –¢–≤—ñ–π —Ä–æ–∑–∫–ª–∞–¥ –¢–∞—Ä–æ:\n\n" + "\n".join(random_cards),
                         reply_markup=explanation_cards_taro_y_or_n)

@router.callback_query(F.data == "explanation_cards")
async def explanation_cards_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not spend_cards_if_possible(user_id, 7):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 7 üÉè.")
        await callback.answer()
        return

    data = await state.get_data()
    cards = data.get("drawn_cards", [])
    question = (data.get("user_question") or "").strip()
    if not cards:
        await callback.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –∫–∞—Ä—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return
    if not question:
        await callback.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.")
        await callback.answer()
        return

    await callback.bot.send_chat_action(callback.message.chat.id, "typing")
    await asyncio.sleep(0.8)

    prompt = (
        "–¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ç–∞—Ä–æ–ª–æ–≥. –õ—é–¥–∏–Ω–∞ –∑–∞–ø–∏—Ç—É—î:\n"
        f"¬´{question}¬ª\n"
        f"–ö–∞—Ä—Ç–∏: {', '.join(cards)}.\n"
        "–î–∞–π –ª–∞–∫–æ–Ω—ñ—á–Ω—É, –∞–ª–µ –≥–ª–∏–±–æ–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–∞–º–µ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è. "
        "–ù–µ –æ–ø–∏—Å—É–π –∫–∞—Ä—Ç–∏ –æ–∫—Ä–µ–º–æ ‚Äî –ø–æ—è—Å–Ω–∏ —Å–ø—ñ–ª—å–Ω–∏–π —Å–µ–Ω—Å —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ. "
        "–£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –¥–æ 100 —Å–ª—ñ–≤."
    )

    try:
        resp = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=600,
        )
        result = resp.choices[0].message.content.strip()
        await callback.message.answer(f"üìñ –ü–æ—è—Å–Ω–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É:\n\n{result}")
        await state.clear()
    except Exception as e:
        print(f"explanation_cards_handler error: {e}")
        await callback.message.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—è—Å–Ω–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
    finally:
        await callback.answer()


# ===== Palm reading =====
@router.message(F.text == "‚úã –ì–∞–¥–∞–Ω–Ω—è –Ω–∞ –ª–æ–¥–æ–Ω—ñ ‚Äì 30üÉè")
async def scan_palm(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not spend_cards_if_possible(user_id, 30):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 30 üÉè.")
        return

    await message.answer_photo(
        photo="AgACAgIAAxkBAAIFs2gUu7wz1RWhx5cJsvj4AAEpCFLQ3gACtPQxG26YqUh2OwHmU7Ra2gEAAwIAA3kAAzYE",
        caption="ü§≤ –ü—Ä–∏–∫–ª–∞–¥—ñ—Ç—å —Ä—É–∫—É –¥–æ —Ä—É–∫–∏ –Ω–∞—à–æ—ó –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—ñ... –í—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ª—ñ–Ω—ñ–π –¥–æ–ª–æ–Ω—ñ..."
    )
    await asyncio.sleep(12)
    await message.answer("‚ú® –ó'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–∞—à–∞ –¥–æ–ª–æ–Ω—è –∑–±–µ—Ä—ñ–≥–∞—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ –¥–æ–ª—ñ... ")
    await asyncio.sleep(6)

    life_line    = random.choice(["–¥–æ–≤–≥–∞", "–∫–æ—Ä–æ—Ç–∫–∞", "–ª–∞–º–∞—î—Ç—å—Å—è", "–Ω–µ—á—ñ—Ç–∫–∞"])
    heart_line   = random.choice(["–≥–ª–∏–±–æ–∫–∞", "—Ä–æ–∑—ñ—Ä–≤–∞–Ω–∞", "–¥–æ–≤–≥–∞", "—Ç–æ–Ω–∫–∞"])
    mind_line    = random.choice(["–ø—Ä—è–º–∞", "–≤–∏–≥–Ω—É—Ç–∞", "–Ω–µ—á—ñ—Ç–∫–∞", "–¥–æ–≤–≥–∞"])
    fate_line    = random.choice(["—á—ñ—Ç–∫–∞", "–≤—ñ–¥—Å—É—Ç–Ω—è", "–ª–∞–º–∞—î—Ç—å—Å—è", "–ø—Ä—è–º–∞"])
    sun_line     = random.choice(["–≤–∏—Ä–∞–∂–µ–Ω–∞", "–∫–æ—Ä–æ—Ç–∫–∞", "–≤—ñ–¥—Å—É—Ç–Ω—è", "—Ä–æ–∑—ñ—Ä–≤–∞–Ω–∞"])
    mercury_line = random.choice(["–¥–æ–≤–≥–∞", "–≤–∏–≥–Ω—É—Ç–∞", "–Ω–µ—á—ñ—Ç–∫–∞", "–≤—ñ–¥—Å—É—Ç–Ω—è"])
    health_line  = random.choice(["–ø—Ä—è–º–∞", "—Ä–æ–∑—ñ—Ä–≤–∞–Ω–∞", "–∫–æ—Ä–æ—Ç–∫–∞", "—Ö–≤–∏–ª—è—Å—Ç–∞"])

    palm_lines_display = (
        "üîÆ *–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–≥—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –¥–æ–ª–æ–Ω—ñ*:\n"
        f"‚è≥ –õ—ñ–Ω—ñ—è –∂–∏—Ç—Ç—è: {life_line}  \n"
        f"üíì –õ—ñ–Ω—ñ—è —Å–µ—Ä—Ü—è: {heart_line}  \n"
        f"üß† –õ—ñ–Ω—ñ—è —Ä–æ–∑—É–º—É: {mind_line}  \n"
        f"‚öñÔ∏è –õ—ñ–Ω—ñ—è –¥–æ–ª—ñ: {fate_line}  \n"
        f"üåû –õ—ñ–Ω—ñ—è –°–æ–Ω—Ü—è: {sun_line}  \n"
        f"ü™Ñ –õ—ñ–Ω—ñ—è –ú–µ—Ä–∫—É—Ä—ñ—è: {mercury_line}  \n"
        f"ü©∫ –õ—ñ–Ω—ñ—è –∑–¥–æ—Ä–æ–≤‚Äô—è: {health_line}"
    )
    await message.answer(palm_lines_display, parse_mode="Markdown")

    palm_lines = (
        f"- –õ—ñ–Ω—ñ—è –∂–∏—Ç—Ç—è: {life_line}\n"
        f"- –õ—ñ–Ω—ñ—è —Å–µ—Ä—Ü—è: {heart_line}\n"
        f"- –õ—ñ–Ω—ñ—è —Ä–æ–∑—É–º—É: {mind_line}\n"
        f"- –õ—ñ–Ω—ñ—è –¥–æ–ª—ñ: {fate_line}\n"
        f"- –õ—ñ–Ω—ñ—è –°–æ–Ω—Ü—è: {sun_line}\n"
        f"- –õ—ñ–Ω—ñ—è –ú–µ—Ä–∫—É—Ä—ñ—è: {mercury_line}\n"
        f"- –õ—ñ–Ω—ñ—è –∑–¥–æ—Ä–æ–≤‚Äô—è: {health_line}"
    )

    prompt = f"""
–¢–∏ ‚Äî –ø—Ä–æ–≤–∏–¥–µ—Ü—å —ñ —Ö—ñ—Ä–æ–º–∞–Ω—Ç. –î–ª—è –∫–æ–∂–Ω–æ—ó –∑ –ø–æ–¥–∞–Ω–∏—Ö –ª—ñ–Ω—ñ–π –¥–∞–π —á—ñ—Ç–∫–µ —Ç–ª—É–º–∞—á–µ–Ω–Ω—è —Å–∞–º–µ —Ü—ñ—î—ó —Ñ–æ—Ä–º–∏.
–ù–µ –≤–∏–≥–∞–¥—É–π –Ω–æ–≤–∏—Ö –ª—ñ–Ω—ñ–π, –Ω–µ –¥–æ–¥–∞–≤–∞–π –∑–∞–π–≤–æ–≥–æ. –ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –≤–ø–µ–≤–Ω–µ–Ω–æ —ñ –ª–∞–∫–æ–Ω—ñ—á–Ω–æ.
–û—Å—å –ª—ñ–Ω—ñ—ó:
{palm_lines}
"""

    try:
        await message.bot.send_chat_action(message.chat.id, "typing")
        resp = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=600,
        )
        result = resp.choices[0].message.content.strip()
        await message.answer(result)
    except Exception as e:
        print(f"scan_palm error: {e}")
        await message.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–ª—É–º–∞—á–µ–Ω–Ω—è –¥–æ–ª–æ–Ω—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –∑–≥–æ–¥–æ–º.")


# ===== Ask Astrologer =====
@router.message(F.text == "üåü –ó–∞–ø–∏—Ç–∞—Ç–∏ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—é ‚Äì 15üÉè")
async def q_to_astrolog(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not spend_cards_if_possible(user_id, 15):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 15 üÉè.")
        return
    await message.answer(
        "‚ú® –°—Ñ–æ—Ä–º—É–ª—é–π—Ç–µ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á—ñ—Ç–∫–æ —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ ‚Äî —Å–∞–º–µ –≤—ñ–¥ —Ü—å–æ–≥–æ –∑–∞–ª–µ–∂–∞—Ç–∏–º–µ, —è–∫–æ—é –±—É–¥–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—ñ.\n\n"
        "üì© –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ —Å—é–¥–∏, –æ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º."
    )
    await state.set_state(AstroChat.waiting_for_question)

@router.message(StateFilter(AstroChat.waiting_for_question))
async def process_astro_question(message: Message, state: FSMContext):
    user_question = (message.text or "").strip()
    if not user_question:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å—Ñ–æ—Ä–º—É–ª—é–π –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—ñ.")
        return

    await message.bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1.0)

    prompt = f"""–£—è–≤–∏, —â–æ —Ç–∏ ‚Äî –ú—ñ—Å—Ç–∏—á–Ω–∞ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—è, –ø—Ä–æ–≤–∏–¥–∏—Ü—è, —è–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç—å –∑ –ª—é–¥–∏–Ω–æ—é –≤—ñ–¥ —ñ–º–µ–Ω—ñ –∑—ñ—Ä–æ–∫.
–¢–≤–æ—è –º–æ–≤–∞ ‚Äî —Ç–µ–ø–ª–∞, –º—É–¥—Ä–∞, –æ–±—Ä–∞–∑–Ω–∞, –∞–ª–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞.

–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏:
1) –∫–æ—Ä–æ—Ç–∫–∏–π –æ–±—Ä–∞–∑–Ω–∏–π –≤—Å—Ç—É–ø (1 —Ä–µ—á–µ–Ω–Ω—è),
2) –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ—Ä–∞–¥–∏/—Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è, —è–∫—ñ –º–æ–∂–Ω–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏,
3) –µ–Ω–µ—Ä–≥–µ—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è ‚Äî –¥—É—Ö–æ–≤–Ω–µ –Ω–∞–ø—É—Ç—Ç—è –æ–¥–Ω—ñ—î—é —Ñ—Ä–∞–∑–æ—é.

–ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. –£–Ω–∏–∫–∞–π –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ñ—Ä–∞–∑ –Ω–∞ –∫—à—Ç–∞–ª—Ç ¬´—É —Ç–µ–±–µ –≤—Å–µ –≤–∏–π–¥–µ¬ª ‚Äî –±—É–¥—å –ø—Ä–µ–¥–º–µ—Ç–Ω–æ—é.
–û—Å—å –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:

{user_question}
"""

    try:
        resp = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=700,
        )
        answer = resp.choices[0].message.content.strip()
        await message.answer(f"üîÆ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—ñ:\n\n{answer}")
        await state.clear()
    except Exception as e:
        print(f"process_astro_question error: {e}")
        await message.answer("‚ö†Ô∏è –í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –∑–≥–æ–¥–æ–º.")


# ===== Archetype compatibility =====
@router.message(F.text == "‚ù§Ô∏è‚Äçüî• –î—ñ–∑–Ω–∞—Ç–∏—Å—å —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –¥—É—à ‚Äì 25üÉè")
async def start_compatibility(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not spend_cards_if_possible(user_id, 25):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 25 üÉè.")
        return
    await message.answer("üîÆ –°–ø–µ—Ä—à—É –æ–±–µ—Ä–∏ —Å–≤—ñ–π –∑–Ω–∞–∫ –ó–æ–¥—ñ–∞–∫—É:", reply_markup=zodiac_keyboard)
    await state.set_state(ZodiacCompatibility.your_sign)

@router.callback_query(StateFilter(ZodiacCompatibility.your_sign))
async def choose_your_sign(callback: CallbackQuery, state: FSMContext):
    if not callback.data or not callback.data.startswith("zodiac_"):
        await callback.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.", show_alert=True)
        return
    user_sign = callback.data.replace("zodiac_", "", 1)
    await state.update_data(your_sign=user_sign)
    await callback.message.answer(
        "üßø –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ –∑–Ω–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∞–±–æ –ª—é–¥–∏–Ω–∏, –∑ —è–∫–æ—é —Ö–æ—á–µ—à –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å:",
        reply_markup=zodiac_keyboard
    )
    await state.set_state(ZodiacCompatibility.partner_sign)
    await callback.answer()

@router.callback_query(StateFilter(ZodiacCompatibility.partner_sign))
async def choose_partner_sign(callback: CallbackQuery, state: FSMContext):
    if not callback.data or not callback.data.startswith("zodiac_"):
        await callback.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.", show_alert=True)
        return

    partner_sign = callback.data.replace("zodiac_", "", 1)

    data = await state.get_data()
    your_sign = data.get("your_sign")
    if not your_sign:
        await callback.message.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ —Å–≤—ñ–π –∑–Ω–∞–∫.")
        await callback.answer()
        return

    await callback.bot.send_chat_action(callback.message.chat.id, "typing")
    await asyncio.sleep(0.8)

    prompt = f"""
–¢–∏ ‚Äî –º—É–¥—Ä–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥, —â–æ –±–∞—á–∏—Ç—å –≥–ª–∏–±–æ–∫—ñ –≤–∑–∞—î–º–æ–∑–≤‚Äô—è–∑–∫–∏ –º—ñ–∂ –∑–Ω–∞–∫–∞–º–∏ –∑–æ–¥—ñ–∞–∫—É.
–î–∞–Ω–æ –¥–≤–∞ –∑–Ω–∞–∫–∏: {your_sign} —ñ {partner_sign}.

–ó—Ä–æ–±–∏ —Ç—Ä–∏ —á–∞—Å—Ç–∏–Ω–∏:
1) –Ø–∫—É –µ–Ω–µ—Ä–≥—ñ—é —Å—Ç–≤–æ—Ä—é—î —ó—Ö–Ω—ñ–π —Å–æ—é–∑ (–º–æ–∂–Ω–∞ –∞–ª–µ–≥–æ—Ä—ñ—è–º–∏).
2) –°–∏–ª—å–Ω—ñ —Ç–∞ —Å–ª–∞–±–∫—ñ —Å—Ç–æ—Ä–æ–Ω–∏ –ø–æ—î–¥–Ω–∞–Ω–Ω—è (—á–µ—Å–Ω–æ, –∞–ª–µ –∫—Ä–∞—Å–∏–≤–æ –π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ).
3) –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è: –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–µ—Ç–∏—á–Ω–∏–π –∞—Ñ–æ—Ä–∏–∑–º/–ø—Ä–æ—Ä–æ—Ü—Ç–≤–æ.

–ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –æ–±—Ä–∞–∑–Ω–æ, –∞–ª–µ –±–µ–∑ –≤–æ–¥–∏. –î–æ ~120‚Äì150 —Å–ª—ñ–≤.
"""

    try:
        resp = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8,
            max_tokens=500,
        )
        answer = resp.choices[0].message.content.strip()

        await callback.message.answer(f"üîÆ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—ñ:\n\n{answer}")
        await callback.message.answer(
            "‚ú® –•–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –≥–ª–∏–±—à—É —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å ‚Äî *—Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –¥—É—à*?\n"
            "–ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∞—Ä—Ö–µ—Ç–∏–ø–Ω–∏–π —Ç–µ—Å—Ç:",
            reply_markup=archetype_test_kb,
            parse_mode="Markdown"
        )
        await state.clear()
    except Exception as e:
        print(f"choose_partner_sign error: {e}")
        await callback.message.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
    finally:
        await callback.answer()

@router.callback_query(F.data == "start_archetype_test")
async def ask_who_first(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer_photo(photo="AgACAgIAAxkBAAIFU2gUoTefcGZ0po2z4W6FC_HcMNBvAAJB-jEbbpihSAqF0HHBk3poAQADAgADeQADNgQ")
    await callback.message.answer("‚ú® –î–ª—è –∫–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∏–º–æ —Ç–µ—Å—Ç —Å–ø–æ—á–∞—Ç–∫—É?", reply_markup=architips_start_kb)

@router.callback_query(F.data.in_(["person_you", "person_partner"]))
async def start_test(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ArchetypeTest.q1)
    await state.update_data(person=callback.data)
    await callback.message.answer("‚ùì –Ø–∫ —Ç–∏ –∑–∞–∑–≤–∏—á–∞–π —Ä–µ–∞–≥—É—î—à –Ω–∞ —Ç—Ä—É–¥–Ω–æ—â—ñ?", reply_markup=architips_q1_kb)
    await callback.answer()

@router.callback_query(StateFilter(ArchetypeTest.q1, ArchetypeTest.q2, ArchetypeTest.q3, ArchetypeTest.q4, ArchetypeTest.q5))
async def next_question(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    current_state = await state.get_state()

    answers = state_data.get("answers", [])
    answers.append(callback.data)
    await state.update_data(answers=answers)

    if current_state == ArchetypeTest.q1.state:
        await state.set_state(ArchetypeTest.q2)
        await callback.message.answer("‚ùì –©–æ —Ç–∏ –Ω–∞–π–±—ñ–ª—å—à–µ —Ü—ñ–Ω—É—î—à —É –∂–∏—Ç—Ç—ñ?", reply_markup=architips_q2_kb)

    elif current_state == ArchetypeTest.q2.state:
        await state.set_state(ArchetypeTest.q3)
        await callback.message.answer("‚ùì –£ —Ç–µ–±–µ –≤—ñ–ª—å–Ω–∏–π –¥–µ–Ω—å. –©–æ —Ä–æ–±–∏—à?", reply_markup=architips_q3_kb)

    elif current_state == ArchetypeTest.q3.state:
        await state.set_state(ArchetypeTest.q4)
        await callback.message.answer("‚ùì –Ø–∫–∏–π —Ç–≤—ñ–π –≥–æ–ª–æ–≤–Ω–∏–π —Å—Ç—Ä–∞—Ö?", reply_markup=architips_q4_kb)

    elif current_state == ArchetypeTest.q4.state:
        await state.set_state(ArchetypeTest.q5)
        await callback.message.answer("‚ùì –Ø–∫ —Ç–∏ —Å–ø—Ä–∏–π–º–∞—î—à —ñ–Ω—à–∏—Ö –ª—é–¥–µ–π?", reply_markup=architips_q5_kb)

    elif current_state == ArchetypeTest.q5.state:
        most_common = Counter(answers).most_common(1)[0][0]
        person = state_data["person"]
        await state.update_data(**{person: most_common}, answers=[])

        if person == "person_you":
            await callback.message.answer(
                "‚úÖ –¢–≤—ñ–π –∞—Ä—Ö–µ—Ç–∏–ø –≤–∏–∑–Ω–∞—á–µ–Ω–æ. –¢–µ–ø–µ—Ä –ø—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
                reply_markup=architips_partner_kb
            )
        else:
            data = await state.get_data()
            you = data.get("person_you")
            partner = data.get("person_partner")

            await callback.message.answer(f"üîÆ –¢–∏ ‚Äî {you}, –ø–∞—Ä—Ç–Ω–µ—Ä ‚Äî {partner}\n–°–∫–æ—Ä–æ —è —Å–∫–∞–∂—É, —è–∫ –≤–∑–∞—î–º–æ–¥—ñ—é—Ç—å –≤–∞—à—ñ –¥—É—à—ñ...")
            await callback.bot.send_chat_action(callback.message.chat.id, "typing")
            await asyncio.sleep(0.8)

            prompt = f"""
–£—è–≤–∏, —â–æ —Ç–∏ ‚Äî –º—É–¥—Ä–∞ –¥—É—à–∞, —è–∫–∞ –≤—ñ–¥—á—É–≤–∞—î –µ–Ω–µ—Ä–≥–µ—Ç–∏–∫—É —Å—Ç–æ—Å—É–Ω–∫—ñ–≤. –î–∞–Ω–æ –¥–≤–∞ –∞—Ä—Ö–µ—Ç–∏–ø–∏: {you} —ñ {partner}.
–û–ø–∏—à–∏ —ó—Ö–Ω—é —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –æ–¥–Ω–∏–º —Ü—ñ–ª—ñ—Å–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º:
- —â–æ –º—ñ–∂ –Ω–∏–º–∏ –≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è (–ø—Ä–∏—Ç—è–≥–Ω–µ–Ω–Ω—è, –Ω–∞–ø—Ä—É–≥–∞, –≥–∞—Ä–º–æ–Ω—ñ—è —á–∏ –≤–∏–∫–ª–∏–∫),
- –¥–µ —ó—Ö–Ω—î —Å–≤—ñ—Ç–ª–æ —ñ –¥–µ —Ç—ñ–Ω—å (—á–µ—Å–Ω–æ, –∞–ª–µ —Ç–µ–ø–ª–æ),
- –∑–∞–≤–µ—Ä—à –∑ –æ–¥–Ω—ñ—î—é –∫–æ—Ä–æ—Ç–∫–æ—é —Ñ—Ä–∞–∑–æ—é-–ø—Ä–æ—Ä–æ—Ü—Ç–≤–æ–º, —è–∫–∞ –∑–∞–ø–∞–º‚Äô—è—Ç–∞—î—Ç—å—Å—è.
–ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, —â–∏—Ä–æ –π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –±–µ–∑ —Å–ø–∏—Å–∫—ñ–≤ —ñ –≤–æ–¥–∏ (‚âà 120‚Äì160 —Å–ª—ñ–≤).
"""
            try:
                resp = await client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.8,
                    max_tokens=600,
                )
                answer = resp.choices[0].message.content.strip()
                await callback.message.answer(f"üîÆ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω—ñ:\n\n{answer}")
                await state.clear()
            except Exception as e:
                print(f"Archetype compatibility error: {e}")
                await callback.message.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
    await callback.answer()


# ===== Dream reading =====
@router.message(F.text == "üí§ –ú–µ–Ω—ñ –Ω–∞—Å–Ω–∏–≤—Å—è —Å–æ–Ω ‚Äì 10üÉè")
async def start_dream(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not spend_cards_if_possible(user_id, 10):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 10 üÉè.")
        return
    await message.answer_photo(
        photo="AgACAgIAAxkBAAIFqGgUucN9O7420zzAQTsBq8oHsc_CAAKk9DEbbpipSLh5NoLFH6U6AQADAgADeQADNgQ",
        caption="üåô –ù–∞–ø–∏—à–∏ —Å–≤—ñ–π —Å–æ–Ω –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º. –Ø –≤—ñ–¥—á—É—é, —â–æ –≤ –Ω—å–æ–º—É –∑–∞—Ö–æ–≤–∞–Ω–æ..."
    )
    await state.set_state(DreamState.waiting_for_dream)

@router.message(StateFilter(DreamState.waiting_for_dream))
async def interpret_dream(message: Message, state: FSMContext):
    person_dream = (message.text or "").strip()
    if not person_dream:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à–∏ —Å–≤—ñ–π —Å–æ–Ω –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")
        return

    await message.bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(0.8)

    prompt = f"""
–¢–∏ ‚Äî —Ç–ª—É–º–∞—á —Å–Ω—ñ–≤. –ü—Ä–æ—á–∏—Ç–∞–π —Å–æ–Ω —ñ –¥–∞–π —Ü—ñ–ª—ñ—Å–Ω–µ, —â–∏—Ä–µ —Ç–ª—É–º–∞—á–µ–Ω–Ω—è –±–µ–∑ —Å–ø–∏—Å–∫—ñ–≤:
- —è–∫—É –ø–æ—Ç—Ä–µ–±—É/–µ–º–æ—Ü—ñ—é –≤—ñ–Ω –æ–∑–≤—É—á—É—î,
- –¥–µ –≤ –Ω—å–æ–º—É —Ç—ñ–Ω—å —ñ —Å–≤—ñ—Ç–ª–æ,
- –∑–∞–≤–µ—Ä—à–∏ –æ–¥–Ω—ñ—î—é –∫–æ—Ä–æ—Ç–∫–æ—é —Ñ—Ä–∞–∑–æ—é-—Ä–µ–∑—é–º–µ (–±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å).
–°–æ–Ω: {person_dream}
"""

    try:
        resp = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=700,
        )
        answer = resp.choices[0].message.content.strip()
        await message.answer(f"üîÆ –¢–ª—É–º–∞—á–µ–Ω–Ω—è —Å–Ω—É:\n{answer}")
        await state.clear()
    except Exception as e:
        print(f"interpret_dream error: {e}")
        await message.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–ª—É–º–∞—á–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")


# ===== Photo util =====
@router.message(F.photo)
async def get_photo_id(message: Message):
    photo = message.photo[-1]
    await message.answer(f"file_id: {photo.file_id}")


# ===== Daily habit =====
@router.message(F.text == "üåô –ê—Å—Ç—Ä–∞–ª—å–Ω–∞ –∑–≤–∏—á–∫–∞ –¥–Ω—è ‚Äì 3üÉè")
async def astral_habit(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not spend_cards_if_possible(user_id, 3):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ä—Ç! –ü–æ—Ç—Ä—ñ–±–Ω–æ 3 üÉè.")
        return

    await message.answer("üåï –¢–≤–æ—è –∞—Å—Ç—Ä–∞–ª—å–Ω–∞ –∑–≤–∏—á–∫–∞ –¥–Ω—è:")
    await message.bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(0.8)

    prompt = (
        "–í–∏–≥–∞–¥–∞–π –æ–¥–Ω—É —É–Ω—ñ–∫–∞–ª—å–Ω—É –∞—Å—Ç—Ä–∞–ª—å–Ω—É –∑–≤–∏—á–∫—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ (–¥–æ 20 —Å–ª—ñ–≤). "
        "–ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å, –ª–∏—à–µ —Ç–µ–∫—Å—Ç –∑–≤–∏—á–∫–∏. –§–æ—Ä–º–∞—Ç: [—Ç–µ–∫—Å—Ç]"
    )

    try:
        resp = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.9,
            max_tokens=60,
        )
        answer = resp.choices[0].message.content.strip()
        await message.answer(answer)
        await state.clear()
    except Exception as e:
        print(f"astral_habit error: {e}")
        await message.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤–∏—á–∫–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –∑–≥–æ–¥–æ–º.")


# ===== Daily bonus (callback) =====
@router.callback_query(F.data == "daily_bonus")
async def daily_bonus_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    amount = 5  # or random.choice([3,5,7])

    await callback.bot.send_chat_action(callback.message.chat.id, "typing")

    db = db_conn()
    try:
        cur = db.cursor()
        cur.execute("SELECT cards, last_gift FROM users WHERE id = ?", (user_id,))
        row = cur.fetchone()

        if row is None:
            cur.execute("INSERT INTO users (id, cards, last_gift) VALUES (?, ?, NULL)", (user_id, 0))
            db.commit()
            cards, last_gift = 0, None
        else:
            cards, last_gift = row[0] or 0, row[1]

        today_str = date.today().isoformat()
        if last_gift == today_str:
            try:
                await callback.message.edit_reply_markup(reply_markup=None)
            except:
                pass
            await callback.message.answer("üîî –¢–∏ –≤–∂–µ –∑–∞–±–∏—Ä–∞–≤ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å —Å—å–æ–≥–æ–¥–Ω—ñ. –ü–æ–≤–µ—Ä—Ç–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞! üòä")
            await callback.answer()
            return

        new_cards = cards + amount
        cur.execute("UPDATE users SET cards = ?, last_gift = ? WHERE id = ?", (new_cards, today_str, user_id))
        db.commit()

    except Exception as e:
        print(f"daily_bonus_handler error: {e}")
        await callback.message.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
        await callback.answer()
        return
    finally:
        db.close()

    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass

    await callback.message.answer(f"üéâ –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ +{amount} üÉè. –ó–∞–≤—ñ—Ç–∞–π –∑–∞–≤—Ç—Ä–∞ —â–µ!")
    await callback.answer()


# ===== Horoscope + broadcast =====
async def generate_daily_horoscope(sign: str) -> str:
    prompt = f"""
–¢–∏ ‚Äî –∞—Å—Ç—Ä–æ–ª–æ–≥ —ñ –ø–æ–µ—Ç. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (–¥–æ 70 —Å–ª—ñ–≤) –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–ª—è –∑–Ω–∞–∫—É {sign}.
–ë—É–¥—å —Ç–µ–ø–ª–∏–º, –º—É–¥—Ä–∏–º —ñ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω–∏–º. –£–Ω–∏–∫–∞–π —à–∞–±–ª–æ–Ω—ñ–≤ —ñ –ø–æ–≤—Ç–æ—Ä—ñ–≤, –ø–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.
–ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ—Ä–∞–∑—É ¬´–¥–µ–Ω—å –±—É–¥–µ —Å–∫–ª–∞–¥–Ω–∏–º¬ª ‚Äî –∑–∞–º—ñ–Ω–∏ —ó—ó –º'—è–∫–æ—é –º–µ—Ç–∞—Ñ–æ—Ä–æ—é.
"""
    resp = await client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.8,
        max_tokens=160,
    )
    return resp.choices[0].message.content.strip()

async def daily_broadcast(bot: Bot):
    db = db_conn()
    cur = db.cursor()
    cur.execute("SELECT id, zodiac_sign FROM users WHERE zodiac_sign IS NOT NULL")
    users = cur.fetchall()
    db.close()

    for user_id, sign in users:
        try:
            text = await generate_daily_horoscope(sign)
            await bot.send_message(
                chat_id=user_id,
                text=f"üåü –ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign}:\n\n{text}",
                reply_markup=daily_bonus_kb,
            )
            await asyncio.sleep(0.05)
        except Exception as e:
            print(f"‚ùå –ù–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {user_id}: {e}")


# ===== Invite & Cards =====
@router.message(F.text == "ü§ù –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞")
async def invite_friend(message: Message):
    bot_username = "tviyAstrogid_bot"
    ref_link = f"https://t.me/{bot_username}?start={message.from_user.id}"
    await message.answer(
        f"üíå –ù–∞–¥—ñ—à–ª–∏ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥—Ä—É–≥—É:\n\n{hbold(ref_link)}\n\n"
        "üÉè –Ø–∫—â–æ –≤—ñ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ ‚Äî —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à 25 –∫–∞—Ä—Ç!"
    )

@router.message(F.text == "üõí–ú–æ—ó –∫–∞—Ä—Ç–∏")
async def my_cards(message: Message):
    user_id = message.from_user.id
    db = db_conn()
    cur = db.cursor()
    cur.execute("SELECT cards FROM users WHERE id = ?", (user_id,))
    row = cur.fetchone()
    db.close()
    cards = int(row[0]) if row and row[0] else 0
    await message.answer(f"üí≥ –ë–∞–ª–∞–Ω—Å: {cards} üÉè")
